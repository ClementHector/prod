"""
Environment variable management for the Prod CLI tool.
"""

import os
import platform
import subprocess
import tempfile
from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Tuple

from src.logger import get_logger

# Constants for repeated string literals
PROD_CLI_HEADER = "# Generated by Prod CLI\n"
PROD_CLI_ENV_SETUP = "# This script sets up the environment for the production\n\n"
PROD_CLI_INTERACTIVE_SETUP = (
    "# This script sets up an interactive production environment\n\n"
)


class ShellScriptGenerator(ABC):
    """
    Abstract base class for shell script generation.
    """

    def __init__(self, env_variables: Dict[str, str]):
        """
        Initialize the shell script generator.

        Args:
            env_variables: Environment variables to include in scripts
        """
        self.env_variables = env_variables
        self.logger = get_logger()

    @abstractmethod
    def generate_env_script(self, prod_name: str) -> str:
        """
        Generate a script that sets environment variables.

        Args:
            prod_name: Name of the production

        Returns:
            Path to the generated script
        """
        pass

    @abstractmethod
    def generate_interactive_script(
        self, prod_name: str, software_list: Optional[List[str]] = None
    ) -> str:
        """
        Generate an interactive shell script with custom environment.

        Args:
            prod_name: Name of the production
            software_list: Optional list of software items in format "name:version"

        Returns:
            Path to the generated script
        """
        pass

    def _ensure_script_directory(self) -> str:
        """
        Ensure the script directory exists and return its path.

        Returns:
            Path to the script directory
        """
        script_dir = os.path.join(tempfile.gettempdir(), "prod_cli")
        os.makedirs(script_dir, exist_ok=True)
        return script_dir

    def _get_software_items(
        self, software_list: Optional[List[str]] = None
    ) -> List[str]:
        """
        Get the list of software items from either the provided list or environment variables.

        Args:
            software_list: Optional list of software items

        Returns:
            List of software items
        """
        if software_list:
            return software_list

        software_list_var = self.env_variables.get("SOFTWARE_LIST", "")
        if software_list_var:
            return software_list_var.split(";")

        return []


class PowerShellScriptGenerator(ShellScriptGenerator):
    """
    PowerShell script generator implementation.
    """

    def generate_env_script(self, prod_name: str) -> str:
        """
        Generate a PowerShell script that sets environment variables.

        Args:
            prod_name: Name of the production

        Returns:
            Path to the generated script
        """
        script_dir = self._ensure_script_directory()
        script_path = os.path.join(script_dir, f"prod_env_{prod_name}.ps1")

        with open(script_path, "w") as f:
            f.write(PROD_CLI_HEADER)
            f.write(PROD_CLI_ENV_SETUP)
            f.write("function Set-ProdEnvironment {\n")

            for key, value in self.env_variables.items():
                f.write(f"    $env:{key} = '{value}'\n")

            f.write(
                "    Write-Host \"Environment configured for production '{0}'\""
                "-f $env:PROD -ForegroundColor Green\n"
            )
            f.write("}\n\n")
            f.write("Set-ProdEnvironment\n")

        self.logger.debug(f"Generated PowerShell script: {script_path}")
        return script_path

    def generate_interactive_script(
        self, prod_name: str, software_list: Optional[List[str]] = None
    ) -> str:
        """
        Generate an interactive PowerShell script with custom environment.

        Args:
            prod_name: Name of the production
            software_list: Optional list of software items in format "name:version"

        Returns:
            Path to the generated script
        """
        script_dir = self._ensure_script_directory()
        script_path = os.path.join(script_dir, f"prod_interactive_{prod_name}.ps1")

        with open(script_path, "w") as f:
            self._write_ps_header(f, prod_name)
            self._write_ps_environment_setup(f)
            software_items = self._get_software_items(software_list)
            self._write_ps_software_aliases(f, software_items)
            self._write_ps_welcome_message(f, prod_name, software_items)

        self.logger.debug(f"Generated interactive PowerShell script: {script_path}")
        return script_path

    def _write_ps_header(self, f, prod_name: str) -> None:
        """
        Write PowerShell script header.

        Args:
            f: File object to write to
            prod_name: Name of the production
        """
        f.write(PROD_CLI_HEADER)
        f.write(PROD_CLI_INTERACTIVE_SETUP)
        f.write("function global:prompt {\n")
        f.write(f'    "[PROD:{prod_name}] $(Get-Location)> "\n')
        f.write("}\n\n")
        f.write("function Get-EnvSafe {\n")
        f.write('    param([string]$Name, [string]$Default = "")\n')
        f.write('    if (Test-Path "Env:\\${Name}") {\n')
        f.write('        return (Get-Item "Env:\\${Name}").Value\n')
        f.write("    }\n")
        f.write("    return $Default\n")
        f.write("}\n\n")

    def _write_ps_environment_setup(self, f) -> None:
        """
        Write PowerShell environment setup code.

        Args:
            f: File object to write to
        """
        f.write("function Set-ProdEnvironment {\n")
        for key, value in self.env_variables.items():
            safe_value = value.replace("'", "''")
            f.write(f"    $env:{key} = '{safe_value}'\n")
        f.write("}\n\n")
        f.write("Set-ProdEnvironment\n\n")
        f.write("# Define software aliases\n")

    def _write_ps_software_aliases(self, f, software_items: List[str]) -> None:
        """
        Write PowerShell software aliases.

        Args:
            f: File object to write to
            software_items: List of software items in format "name:version"
        """
        for item in software_items:
            if ":" in item:
                software_name, version = item.split(":", 1)
                self._write_ps_software_function(f, software_name, version)
                self._write_ps_help_function(f, software_name, version)

    def _write_ps_software_function(self, f, software_name: str, version: str) -> None:
        """
        Write PowerShell software launcher function.

        Args:
            f: File object to write to
            software_name: Name of the software
            version: Version of the software
        """
        f.write(f"function global:{software_name} {{\n")
        f.write("    param(\n")
        f.write("        [Parameter(ValueFromRemainingArguments=$true)]\n")
        f.write("        [string[]]$Params\n")
        f.write("    )\n")
        cmd = f'    $rezCmd = "rez env {software_name}-{version} -- {software_name}"\n'
        f.write(cmd)
        f.write("    if ($Params) {\n")
        f.write('        $rezCmd += " " + ($Params -join " ")\n')
        f.write("    }\n")
        f.write("    Invoke-Expression $rezCmd\n")
        f.write("}\n\n")

    def _write_ps_help_function(self, f, software_name: str, version: str) -> None:
        """
        Write PowerShell help function for software.

        Args:
            f: File object to write to
            software_name: Name of the software
            version: Version of the software
        """
        f.write(f"# Help for {software_name}\n")
        f.write(f"function global:Help-{software_name} {{\n")
        usage_msg = (
            f'    Write-Host "Usage: {software_name} [options]" -ForegroundColor Cyan\n'
        )
        f.write(usage_msg)
        launch_msg = (
            f'    Write-Host "Launches {software_name} version {version} with Rez" '
            f"-ForegroundColor Cyan\n"
        )
        f.write(launch_msg)
        package_msg = (
            f'    Write-Host "For package options, use: {software_name} '
            f'--packages pkg1 pkg2" -ForegroundColor Cyan\n'
        )
        f.write(package_msg)
        f.write("}\n\n")

    def _write_ps_welcome_message(
        self, f, prod_name: str, software_items: List[str]
    ) -> None:
        """
        Write PowerShell welcome message.

        Args:
            f: File object to write to
            prod_name: Name of the production
            software_items: List of software items
        """
        f.write(f"$env:prodName = '{prod_name}'\n")
        f.write(
            'Write-Host "==========================================" -ForegroundColor Cyan\n'
        )
        f.write(
            'Write-Host "PRODUCTION ENVIRONMENT ACTIVATED: " -NoNewline -ForegroundColor Cyan\n'
        )
        f.write(f'Write-Host "{prod_name}" -ForegroundColor Green\n')
        f.write(
            'Write-Host "==========================================" -ForegroundColor Cyan\n'
        )
        exit_msg = "Write-Host \"Type 'exit' to leave the production environment`n\" -ForegroundColor DarkGray\n\n"
        f.write(exit_msg)

        f.write('Write-Host "Available Software Tools:" -ForegroundColor Cyan\n')
        if software_items:
            for item in software_items:
                if ":" in item:
                    software_name, version = item.split(":", 1)
                    f.write(
                        f'Write-Host "* {software_name} (version {version})" -ForegroundColor White\n'
                    )
                else:
                    f.write(f'Write-Host "* {item}" -ForegroundColor White\n')
        else:
            f.write(
                'Write-Host "No software configured for this production" -ForegroundColor Yellow\n'
            )


class BashScriptGenerator(ShellScriptGenerator):
    """
    Bash script generator implementation.
    """

    def generate_env_script(self, prod_name: str) -> str:
        """
        Generate a Bash script that sets environment variables.

        Args:
            prod_name: Name of the production

        Returns:
            Path to the generated script
        """
        script_dir = self._ensure_script_directory()
        script_path = os.path.join(script_dir, f"prod_env_{prod_name}.sh")

        with open(script_path, "w") as f:
            f.write("#!/bin/bash\n")
            f.write(PROD_CLI_HEADER)
            f.write(PROD_CLI_ENV_SETUP)

            for key, value in self.env_variables.items():
                f.write(f"export {key}='{value}'\n")

            f.write(
                '\nprintf "Environment configured for production \'%s\'\\n" "$PROD"\n'
            )

        os.chmod(script_path, 0o755)
        self.logger.debug(f"Generated Bash script: {script_path}")
        return script_path

    def generate_interactive_script(
        self, prod_name: str, software_list: Optional[List[str]] = None
    ) -> str:
        """
        Generate an interactive Bash script with custom environment.

        Args:
            prod_name: Name of the production
            software_list: Optional list of software items in format "name:version"

        Returns:
            Path to the generated script
        """
        script_dir = self._ensure_script_directory()
        script_path = os.path.join(script_dir, f"prod_interactive_{prod_name}.sh")

        with open(script_path, "w") as f:
            self._write_bash_header(f)
            self._write_bash_exit_function(f)
            self._write_bash_environment_setup(f)
            software_items = self._get_software_items(software_list)
            self._write_bash_software_aliases(f, software_items)
            self._write_bash_prompt_setup(f)
            self._write_bash_welcome_message(f, software_items)

        os.chmod(script_path, 0o755)
        self.logger.debug(f"Generated interactive Bash script: {script_path}")
        return script_path

    def _write_bash_header(self, f) -> None:
        """
        Write Bash script header.

        Args:
            f: File object to write to
        """
        f.write("#!/bin/bash\n")
        f.write(PROD_CLI_HEADER)
        f.write(PROD_CLI_INTERACTIVE_SETUP)

    def _write_bash_exit_function(self, f) -> None:
        """
        Write Bash exit function override.

        Args:
            f: File object to write to
        """
        f.write("function original_exit() {\n")
        f.write('    builtin exit "$@"\n')
        f.write("}\n\n")

        f.write("function exit() {\n")
        f.write(
            '    printf "\\033[32mExited production environment \'%s\'\\033[0m\\n" "$PROD"\n'
        )
        f.write('    original_exit "$@"\n')
        f.write("}\n\n")

    def _write_bash_environment_setup(self, f) -> None:
        """
        Write Bash environment setup code.

        Args:
            f: File object to write to
        """
        for key, value in self.env_variables.items():
            safe_value = value.replace("'", "'\\''")
            f.write(f"export {key}='{safe_value}'\n")
        f.write("\n# Define software aliases\n")

    def _write_bash_software_aliases(self, f, software_items: List[str]) -> None:
        """
        Write Bash software aliases.

        Args:
            f: File object to write to
            software_items: List of software items in format "name:version"
        """
        for item in software_items:
            if ":" in item:
                software_name, version = item.split(":", 1)
                f.write(f"function {software_name}() {{\n")
                f.write(
                    f'    rez env {software_name}-{version} -- {software_name} "$@"\n'
                )
                f.write("}\n")
                f.write(f"export -f {software_name}\n\n")

    def _write_bash_prompt_setup(self, f) -> None:
        """
        Write Bash prompt setup.

        Args:
            f: File object to write to
        """
        f.write("\n# Set custom prompt\n")
        f.write('export PS1="[PROD:$PROD] \\w> "\n\n')

    def _write_bash_welcome_message(self, f, software_items: List[str]) -> None:
        """
        Write Bash welcome message.

        Args:
            f: File object to write to
            software_items: List of software items
        """
        f.write("echo\n")
        f.write('printf "==========================================\\n"\n')
        f.write('printf "PRODUCTION ENVIRONMENT ACTIVATED: %s\\n" "$PROD"\n')
        f.write('printf "==========================================\\n"\n')
        f.write("echo\n")
        f.write("printf \"Type 'exit' to leave the production environment\\n\\n\"\n")
        f.write('printf "Available Software Tools:\\n"\n')

        if software_items:
            for item in software_items:
                if ":" in item:
                    software_name, version = item.split(":", 1)
                    f.write(f'printf "  * {software_name} (version {version})\\n"\n')
                else:
                    f.write(f'printf "  * {item}\\n"\n')
        else:
            f.write('printf "No software configured for this production\\n"\n')


class EnvironmentManager:
    """
    Manages environment variables for production environments.
    """

    def __init__(self):
        """
        Initialize the environment manager.
        """
        self.logger = get_logger()
        self.original_env = os.environ.copy()
        self.current_env = os.environ.copy()
        self.env_variables: Dict[str, str] = {}

    def set_environment_variables(self, variables: Dict[str, str]) -> None:
        """
        Set up environment variables.

        Args:
            variables: Dictionary of environment variables to set
        """
        self.env_variables.update(variables)

        for key, value in variables.items():
            self._set_environment_variable(key, value)
            self.logger.debug(f"Set environment variable: {key}={value}")

    def _set_environment_variable(self, key: str, value: str) -> None:
        """
        Set an environment variable.

        Args:
            key: Environment variable name
            value: Environment variable value
        """
        self.current_env[key] = value
        os.environ[key] = value

    def set_path_variables(self, path_variables: Dict[str, List[str]]) -> None:
        """
        Set up path environment variables.

        Args:
            path_variables: Dictionary of path environment variables to set
        """
        for key, paths in path_variables.items():
            existing_path = self.current_env.get(key, "")
            formatted_paths = self._format_paths(paths)
            separator = self._get_path_separator()
            new_path = existing_path

            for path in formatted_paths:
                norm_path = self._normalize_path(path)
                if existing_path and norm_path not in [
                    self._normalize_path(p) for p in existing_path.split(separator)
                ]:
                    new_path = f"{path}{separator}{new_path}" if new_path else path

            self._set_environment_variable(key, new_path)
            self.logger.debug(f"Set path variable: {key}={new_path}")

    def _format_paths(self, paths: List[str]) -> List[str]:
        """
        Format paths according to the operating system.

        Args:
            paths: List of paths to format

        Returns:
            List of formatted paths
        """
        formatted_paths = []
        for path in paths:
            path = os.path.expandvars(path)
            if platform.system() == "Windows":
                path = path.replace("/", "\\")
            formatted_paths.append(path)
        return formatted_paths

    def _get_path_separator(self) -> str:
        """
        Get the path separator for the current operating system.

        Returns:
            Path separator
        """
        return ";" if platform.system() == "Windows" else ":"

    def _normalize_path(self, path: str) -> str:
        """
        Normalize a path for comparison.

        Args:
            path: Path to normalize

        Returns:
            Normalized path
        """
        return os.path.normpath(path.lower())

    def reset_environment(self) -> None:
        """
        Reset the environment to its original state.
        """
        # Remove added variables
        for key in list(self.env_variables.keys()):
            if key in os.environ:
                del os.environ[key]

        # Restore original variables
        for key, value in self.original_env.items():
            if key not in os.environ and key in self.env_variables:
                os.environ[key] = value

        self.current_env = os.environ.copy()
        self.env_variables.clear()
        self.logger.debug("Reset environment to original state")

    def generate_shell_script(self, prod_name: str) -> str:
        """
        Generate a shell script that sets the environment variables.

        Args:
            prod_name: Name of the production

        Returns:
            Path to the generated script
        """
        script_generator = self._get_script_generator()
        return script_generator.generate_env_script(prod_name)

    def generate_interactive_shell_script(
        self, prod_name: str, software_list: Optional[List[str]] = None
    ) -> str:
        """
        Generate an interactive shell script that sets environment variables
        and defines an 'exit' command to properly exit the production environment.

        Args:
            prod_name: Name of the production
            software_list: Optional list of software items in format "name:version"

        Returns:
            Path to the generated script
        """
        script_generator = self._get_script_generator()
        return script_generator.generate_interactive_script(prod_name, software_list)

    def _get_script_generator(self) -> ShellScriptGenerator:
        """
        Get the appropriate script generator for the current operating system.

        Returns:
            Script generator instance
        """
        if platform.system() == "Windows":
            return PowerShellScriptGenerator(self.env_variables)
        else:
            return BashScriptGenerator(self.env_variables)

    def apply_environment_to_parent_shell(self, script_path: str) -> None:
        """
        Attempt to execute the script in the parent shell to apply environment variables.
        This is primarily used for testing and debugging, as in most shells
        this is not possible.

        Args:
            script_path: Path to the shell script
        """
        try:
            if platform.system() == "Windows":
                command = f"& '{script_path}'"
                subprocess.run(["powershell", "-Command", command], check=True)
            else:
                command = f"source '{script_path}'"
                subprocess.run(["bash", "-c", command], check=True)

            self.logger.debug(f"Executed environment script: {script_path}")
        except subprocess.CalledProcessError as e:
            self.logger.error(f"Failed to execute environment script: {e}")

    def source_interactive_shell(self, script_path: str) -> None:
        """
        Source the interactive shell script to enter a subshell with the production environment.
        This function will start a new interactive shell and only return when the user exits that shell.

        Args:
            script_path: Path to the interactive shell script
        """
        try:
            self.logger.debug(f"Starting interactive shell with script: {script_path}")

            if platform.system() == "Windows":
                ps_path = "powershell.exe"
                cmd = f'{ps_path} -NoLogo -NoExit -ExecutionPolicy Bypass -File "{script_path}"'
                os.system(cmd)
            else:
                os.system(f'bash --rcfile "{script_path}"')

            self.logger.debug("Interactive shell exited")
        except Exception as e:
            self.logger.error(f"Failed to source interactive shell script: {e}")
